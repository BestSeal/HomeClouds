CheckTableForExistence user_access_levels
CREATE TABLE user_access_levels (
access_level SMALLINT NOT NULL PRIMARY KEY, 
access_level_name VARCHAR(20) NOT NULL UNIQUE, 
access_level_description VARCHAR(50) NOT NULL
);
INSERT INTO user_access_levels (access_level, access_level_name, access_level_description) VALUES 
(1, 'admin', 'Can do everything');
INSERT INTO user_access_levels (access_level, access_level_name, access_level_description) VALUES 
(0, 'regular user', 'Regular, rights are regulated');
CheckTableForExistence file_access_levels
CREATE TABLE file_access_levels (
access_level SMALLINT NOT NULL PRIMARY KEY, 
access_level_name VARCHAR(20) NOT NULL UNIQUE, 
access_level_description VARCHAR(50) NOT NULL
);
INSERT INTO file_access_levels (access_level, access_level_name, access_level_description) VALUES 
(0, 'invisible', 'File is not visible for regular users');
INSERT INTO file_access_levels (access_level, access_level_name, access_level_description) VALUES 
(1, 'read', 'Can be read');
INSERT INTO file_access_levels (access_level, access_level_name, access_level_description) VALUES 
(2, 'write', 'Can be copied for modification');
INSERT INTO file_access_levels (access_level, access_level_name, access_level_description) VALUES 
(3, 'all', 'You are admin for this file. No restrictions');
CheckTableForExistence standard_person 
CREATE TABLE standard_person (
person_id BIGSERIAL NOT NULL PRIMARY KEY, 
person_access_level VARCHAR(20) NOT NULL REFERENCES user_access_levels(access_level_name),  
name VARCHAR(150), 
email VARCHAR(80) UNIQUE, 
login VARCHAR(80) NOT NULL UNIQUE, 
password VARCHAR(40) NOT NULL
);
CheckTableForExistence standard_log_entry 
CREATE TABLE standard_log_entry (
entry_id BIGSERIAL NOT NULL PRIMARY KEY, 
entry_type VARCHAR(50) NOT NULL, 
message VARCHAR(300), 
person_login VARCHAR(80) REFERENCES standard_person(login), 
IP INET, 
when_happened TIMESTAMP DEFAULT LOCALTIMESTAMP
);
CheckTableForExistence standard_file 
CREATE TABLE standard_file (
id_of_file BIGSERIAL NOT NULL PRIMARY KEY, 
full_path VARCHAR(300) NOT NULL UNIQUE, 
general_file_access_level VARCHAR(20) NOT NULL REFERENCES file_access_levels(access_level_name), 
creator_login VARCHAR(80) REFERENCES standard_person(login) NOT NULL
);
CheckTableForExistence accesses
CREATE TABLE accesses (
access_id BIGSERIAL NOT NULL PRIMARY KEY,
full_path VARCHAR(300) NOT NULL REFERENCES standard_file(full_path),
person_login VARCHAR(80) NOT NULL REFERENCES standard_person(login),
file_access_level VARCHAR(80) NOT NULL REFERENCES file_access_levels(access_level_name),
UNIQUE (full_path, person_login)
);
CheckTableForExistence shared_files
CREATE TABLE shared_files (
id_of_share BIGSERIAL NOT NULL PRIMARY KEY,
full_path VARCHAR(300) NOT NULL REFERENCES standard_file(full_path), 
creator_login VARCHAR(80) REFERENCES standard_person(login) NOT NULL,
link VARCHAR(400) NOT NULL
);
